#include <iostream>
#include <fstream>
#include <libical/ical.h>
#include <vector>
#include <string>
struct Event{
    std::string summary;
    std::string date_start;
    std::string date_end;
    std::string location;
};
std::vector<Event> read_ics(const std::string& file_path) {
    std::vector<Event> events;
    std::ifstream file(file_path);
    if(!file.is_open()){
        std::cerr << "[ERROR]: could not open " << file_path << '\n';
        return {};
    }
    std::string content((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
    if(content.empty()){
        std::cerr << "Error: File content is empty" << std::endl;
        return events;
    }
    icalcomponent *calendar = icalparser_parse_string(content.c_str());
       if (!calendar) {
        std::cerr << "Error: Could not parse ical content" << std::endl;
        return events;
    }

    icalcomponent *event;

    for (event = icalcomponent_get_first_component(calendar, ICAL_VEVENT_COMPONENT); 
         event; 
         event = icalcomponent_get_next_component(calendar, ICAL_VEVENT_COMPONENT)) {
        Event e;
        e.summary = icalcomponent_get_summary(event);
        e.date_start = icaltime_as_ical_string(icalcomponent_get_dtstart(event));
        e.date_end = icaltime_as_ical_string(icalcomponent_get_dtend(event));
        e.location = icalcomponent_get_location(event);
        events.push_back(e);
    }
    icalcomponent_free(calendar);
    return events;
}

int main(){
    std::vector<Event> events = read_ics("/home/victor/Documents/code/cpp/cal2tex/cals/vlocatelicnpq@gmail.com.ics");
    std::cerr << events.size() << '\n';
    for (const auto& event : events) {
        std::cout << "Summary: " << event.summary << std::endl;
        std::cout << "Start: " << event.date_start << std::endl;
        std::cout << "End: " << event.date_end << std::endl;
        std::cout << "Location: " << event.location << std::endl;
        std::cout << std::endl;
    }
    return 0;
}
